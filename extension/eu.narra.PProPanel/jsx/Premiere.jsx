$._ext_PPRO={  sync : function() {    var array = new Array();    function walkAllBinsForFootage(parentItem) {      for (var j = 0; j < parentItem.children.numItems; j++){        var currentChild = parentItem.children[j];        if (currentChild != null){          if (currentChild.type == ProjectItemType.BIN){            walkAllBinsForFootage(currentChild);          } else {            array.push(currentChild.name);          }        }      }    }    app.enableQE();    var  numItemsInRoot = app.project.rootItem.children.numItems;    for (var i = 0; i < numItemsInRoot; i++) {      var currentItem = app.project.rootItem.children[i];      if (currentItem != null){         if (currentItem.type == ProjectItemType.BIN){           walkAllBinsForFootage(currentItem);        } else {          array.push(currentItem.name);        }      }    }    return array;  },  updateGrowingFile : function() {    var numItems = app.project.rootItem.children.numItems;    var currentItem = 0;    for (var i = 0; i < numItems; i++){        currentItem = app.project.rootItem.children[i];        if (currentItem != null){          currentItem.refreshMedia();        }    }  },    //////////////////////////////////////////////////////////////////////////////  saveProject : function() {    app.project.save();  },    //////////////////////////////////////////////////////////////////////////////  renameFootage : function(id, name) {    var array = new Array();    function walkAllBinsForFootage(parentItem) {      for (var j = 0; j < parentItem.children.numItems; j++){        var currentChild = parentItem.children[j];        if (currentChild != null){          if (currentChild.type == ProjectItemType.BIN){            walkAllBinsForFootage(currentChild);          } else {            dotPos = currentChild.name.lastIndexOf('.');            var itemId = currentChild.name.substr(0, dotPos);            if(itemId == id) {              currentChild.name = name;              currentChild.refreshMedia();              break;            }          }        }      }    }    app.enableQE();    var numItemsInRoot = app.project.rootItem.children.numItems;    for (var i = 0; i < numItemsInRoot; i++) {      var currentItem = app.project.rootItem.children[i];      if (currentItem != null){         if (currentItem.type == ProjectItemType.BIN){           walkAllBinsForFootage(currentItem);        } else {          dotPos = currentItem.name.lastIndexOf('.');          var itemId = currentItem.name.substr(0, dotPos);          if(itemId == id) {            currentItem.name = name;            currentItem.refreshMedia();            break;          }        }      }    }  },  //////////////////////////////////////////////////////////////////////////////    getActiveSequenceName : function() {    var return_msg = "No active sequence."    var active_seq = app.project.activeSequence;    if (active_seq != null) {      return_msg = active_seq.name;    }        return return_msg;  },    //////////////////////////////////////////////////////////////////////////////      createSequenceMarkers : function() {    var active_seq = app.project.activeSequence;          if (active_seq != null) {      var markers = active_seq.markers;         if (markers != null) {        var numMarkers  = markers.numMarkers;          if (numMarkers > 0) {            var marker_index = 1;                                for (var current_marker = markers.getFirstMarker();                  current_marker != undefined;                  current_marker = markers.getNextMarker(current_marker)){              if (current_marker.name != "") {                alert('Marker '+marker_index+' name = '+current_marker.name+'.');              } else {                alert('Marker '+marker_index+' has no name.');              }                                  if (current_marker.end.seconds > 0) {                alert('Marker '+marker_index+' duration = '+(current_marker.end.seconds - current_marker.start.seconds)+' seconds.');              } else {                alert('Marker '+marker_index+' has no duration.');              }              alert('Marker '+marker_index+' starts at '+current_marker.start.seconds+' seconds.');                                      marker_index = marker_index + 1;            }         }      }        var new_comment_marker = markers.createMarker(12.345);      new_comment_marker.name = 'Marker created by PProPanel.';      new_comment_marker.comments = 'Here are some comments, inserted by PProPanel.';      new_comment_marker.end = 15.6789;      var new_web_marker = markers.createMarker(14.345);      new_web_marker.name = 'Web marker created by PProPanel.';      new_web_marker.comments = 'Here are some comments, inserted by PProPanel.';      new_web_marker.end = 15.6789;            new_web_marker.setTypeAsWebLink("http://www.adobe.com", "frame target");    }  },    //////////////////////////////////////////////////////////////////////////////    exportFCPXML : function() {    app.enableQE(); //for file operations        var project = app.project;            if (project.activeSequence != null) {      var proj_path = new File(project.path);      var parent_dir = proj_path.parent;      var out_name = project.activeSequence.name;      var extension = '.xml';      var sep = '\\';      if (qe.platform == 'Macintosh') {        sep = '/';      }                  var output_path = Folder.selectDialog("Choose the output directory");          if (output_path != null) {        var completeOutputPath = output_path.fsName + sep + out_name + extension;        project.activeSequence.exportAsFinalCutProXML(completeOutputPath, 1); // 1 == suppress UI                    var info = "Exported FCP XML for "+project.activeSequence.name+" to "+completeOutputPath+", next to the project.";        alert(info);      } else {        alert("No output path chosen.")      }    } else {      alert("No active sequence.");    }  },    //////////////////////////////////////////////////////////////////////////////    openInSource : function() {    app.enableQE();        var fileToOpen = File.openDialog ("Choose file to open.", "Any file:*.*", false); //false - only one file    if (fileToOpen != null) {      qe.source.openFilePath(fileToOpen.fsName);      qe.source.player.play();     }  },    //////////////////////////////////////////////////////////////////////////////  importFiles : function() {    function searchForBinWithName(name) {      var numItemsAtRoot = app.project.rootItem.children.numItems;      var foundBin = 0;                for (var i = 0; i < numItemsAtRoot && foundBin == 0; i++) {        var currentItem = app.project.rootItem.children[i];                  if (currentItem != null && currentItem.name == nameToFind) {          foundBin = currentItem;        }      }      return foundBin;    }    var proj = app.project;        if (proj != null) {      // Find or create a target bin.      var nameToFind = 'Targeted by PProPanel import';      var targetBin = searchForBinWithName(nameToFind);      if (targetBin == 0) {        app.project.rootItem.createBin(nameToFind);      }      targetBin = searchForBinWithName(nameToFind);      targetBin.select();                  var file_or_files_to_import = File.openDialog ("Choose files to import", "Any file:*.*", true); //true - multiple files            if (file_or_files_to_import != null) {        // We have an array of File objects; importFiles() takes an array of paths.        var import_these = new Array;                for (var i = 0; i < file_or_files_to_import.length; i++) {          import_these[i] = file_or_files_to_import[i].fsName;        }        proj.importFiles(import_these);        }      }    },    //////////////////////////////////////////////////////////////////////////////    replaceMedia : function() {    // Warning: Currently, sample code assumes the zero-th item in the project is footage.    var item = app.project.rootItem.children[0];         if (item.canChangeMediaPath()) {      var replacementMedia = File.openDialog("Choose new media file, for project item "+item.name, "Any file:*.*", false);            if (replacementMedia != null) {        item.name = replacementMedia.name + ", formerly known as " + item.name;        item.changeMediaPath(replacementMedia.fsName);        replacementMedia.close();       }    } else {      alert("Couldn't change path. replaceMedia() can't act on merged clips, or maybe the zero-th item isn't footage.");    }  },    //////////////////////////////////////////////////////////////////////////////    createSequence : function() {    var someID = "xyz123";    var seqName = prompt('Name of sequence?',  'New', 'Sequence Naming Prompt');    app.project.createNewSequence(seqName, someID);  },  //////////////////////////////////////////////////////////////////////////////  createSequenceFromPreset : function(preset_path) {  // Beware of different path separators on Win and Mac!    app.enableQE();    qe.project.init();    qe.project.newSequence("Some Sequence Name", preset_path);  },    //////////////////////////////////////////////////////////////////////////////  mungeXMP : function()  {    var proj_item = app.project.rootItem.children[0]; // assumes first item is footage.    if (proj_item != null) {      if (ExternalObject.AdobeXMPScript == undefined) {        ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');       }        if(ExternalObject.AdobeXMPScript != undefined) {   // safety-conscious!        var xmp_blob = proj_item.getXMPMetadata();        var xmp = new XMPMeta(xmp_blob);        var have_a_scene = xmp.doesPropertyExist(XMPConst.NS_DM, "scene");        var oldVal = "";                if (have_a_scene == true){          var myScene = xmp.getProperty(XMPConst.NS_DM, "scene");          oldVal     = myScene.value;        }              // Regardless of whether there WAS scene data, set scene data.                 xmp.setProperty(XMPConst.NS_DM, "scene", oldVal + " Added by PProPanel sample!");                // Now, let's mess with the description! Multi-line field == slightly more complicated.                 var descriptionProp = "description";        var have_a_description = xmp.doesPropertyExist(XMPConst.NS_DC, descriptionProp);        var firstDescription = "PProPanel wrote the first value into description.";        var numDescriptionValuesPresent = xmp.countArrayItems(XMPConst.NS_DC, descriptionProp);              if ( numDescriptionValuesPresent == 0) {            xmp.appendArrayItem(XMPConst.NS_DC,                       descriptionProp,                       null,                       XMPConst.PROP_IS_ARRAY,                       XMPConst.ARRAY_IS_ORDERED);            xmp.insertArrayItem(XMPConst.NS_DC,                       descriptionProp,                       1,                       firstDescription);          } else {            var appendedText   = '...blahblahblah added by PProPanel.';            oldDescriptionValue = xmp.getArrayItem(XMPConst.NS_DC, descriptionProp, 1);            xmp.setArrayItem(  XMPConst.NS_DC,                       descriptionProp,                       1,                       (oldDescriptionValue.value + appendedText));          }        var xmp_as_str = xmp.serialize();    // either way, serialize and write XMP.        proj_item.setXMPMetadata(xmp_as_str);      }    }  },    //////////////////////////////////////////////////////////////////////////////   dumpOMF : function() {    app.enableQE();        var active_seq = qe.project.getActiveSequence();        if (active_seq != null) {      var output_path = Folder.selectDialog("Choose the output directory");          if (output_path != null){        var abs_path = output_path.fsName;        var outname  = new String(active_seq.name) + '.omf';        var sep         = '\\';        if (qe.platform == 'Macintosh') {          sep = '/';        }                        var full_out_path_with_name = abs_path + sep + outname;        app.project.exportOMF(  app.project.activeSequence,    // sequence                    full_out_path_with_name,     // output file path                    'OMFTitle',            // OMF title                    48000,              // sample rate (48000 or 96000)                    16,                // bits per sample (16 or 24)                    1,                // audio encapsulated flag (1 : yes or 0 : no)                    0,                // audio file format (0 : AIFF or 1 : WAV)                    0,                // trim audio files (0 : no or 1 : yes)                    0,                // handle frames (if trim is 1, handle frames from 0 to 1000)                    0);                // include pan flag (0 : no or 1 : yes)      }    } else {      alert("No active sequence.");    }  },    //////////////////////////////////////////////////////////////////////////////    addClipMarkers : function () {    var proj_item = app.project.rootItem.children[0]; // assumes first item is footage.    if (proj_item != null) {      if (proj_item.type == ProjectItemType.CLIP || proj_item.type == ProjectItemType.FILE) {                markers = proj_item.getMarkers();        if (markers != null) {          var num_markers   = markers.numMarkers;          var new_marker    = markers.createMarker(12.345);          new_marker.name   = 'Marker created by PProPanel.';          new_marker.comments = 'Here are some comments, inserted by PProPanel.';          new_marker.end     = 15.6789;          //default marker type == comment. To change marker type, call one of these:        // new_marker.setTypeAsChapter();        // new_marker.setTypeAsWebLink();        // new_marker.setTypeAsSegmentation();        // new_marker.setTypeAsComment();        }      } else {        alert("Can only add markers to clips or files.");      }    }      },  //////////////////////////////////////////////////////////////////////////////    modifyProjectMetadata : function () {    var kPProPrivateProjectMetadataURI = "http://ns.adobe.com/premierePrivateProjectMetaData/1.0/";    var namefield = "Column.Intrinsic.Name";    var tapename  = "Column.Intrinsic.TapeName";    var desc      = "Column.PropertyText.Description";    if (app.isDocumentOpen()) {      var projectItem = app.project.rootItem.children[0];      if (projectItem != null) {        if (ExternalObject.AdobeXMPScript == undefined) {          ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');        }        if (ExternalObject.AdobeXMPScript != undefined) {  // safety-conscious!          var projectMetadata = projectItem.getProjectMetadata();          var xmp = new XMPMeta(projectMetadata);          var obj = xmp.dumpObject();          // var aliases = xmp.dumpAliases();          var namespaces = XMPMeta.dumpNamespaces();          var found_name      = xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, namefield);          var found_tapename  = xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, tapename);          var found_desc      = xmp.doesPropertyExist(kPProPrivateProjectMetadataURI, desc);          xmp.setProperty(kPProPrivateProjectMetadataURI, tapename,   "***TAPENAME***");          xmp.setProperty(kPProPrivateProjectMetadataURI, desc,     "***DESCRIPTION***");          xmp.setProperty(kPProPrivateProjectMetadataURI, namefield,   "***NEWNAME***");          var str = xmp.serialize();          var array = new Array();          array[0] = tapename;          array[1] = desc;          array[2] = namefield;          projectItem.setProjectMetadata(str, array);        }      }    }  },  //////////////////////////////////////////////////////////////////////////////  updateEventPanel : function() {    app.setSDKEventMessage('Here is some information.', 'info');    app.setSDKEventMessage('Here is a warning.', 'warning');    app.setSDKEventMessage('Here is an error.', 'error');  },      //////////////////////////////////////////////////////////////////////////////      dumpProjectItemXMP : function(outPath, projectItem, sep) {    var xmpBlob = projectItem.getXMPMetadata();    var outFileName     = projectItem.name + '.xmp';        var completeOutputPath   = outPath.fsName + sep + outFileName;    var outFile       = new File(completeOutputPath);    if (outFile != null){      outFile.encoding = "UTF8";      outFile.open("w", "TEXT", "????");      outFile.write(xmpBlob.toString());      outFile.close();    }  },  dumpXMPFromAllProjectItems : function() {      function walkAllBinsForFootage(parentItem){      for (var j = 0; j < parentItem.children.numItems; j++){        var currentChild = parentItem.children[j];        if (currentChild != null){          if (currentChild.type == ProjectItemType.BIN){            walkAllBinsForFootage(currentChild);          } else {            $._ext_PPRO.dumpProjectItemXMP(currentChild);          }        }      }    }    app.enableQE();    var outPath = Folder.selectDialog("Choose the output directory");    var sep   = '\\';                 if (qe.platform == 'Macintosh') {        sep = '/';    }    if (outPath != null) {      var  numItemsInRoot = app.project.rootItem.children.numItems;      for (var i = 0; i < numItemsInRoot; i++){        var currentItem = app.project.rootItem.children[i];        if (currentItem != null){           if (currentItem.type == ProjectItemType.BIN){             walkAllBinsForFootage(currentItem);          } else {            $._ext_PPRO.dumpProjectItemXMP(outPath, currentItem, sep);          }        }      }    }  },};